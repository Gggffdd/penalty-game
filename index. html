<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Пенальти Мастер</title>
    
    <!-- PWA-настройки -->
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#1E88E5">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <link rel="apple-touch-icon" href="icon-192x192.png">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
        }
        
        body {
            overflow: hidden;
            font-family: Arial, sans-serif;
            position: fixed;
            width: 100%;
            height: 100%;
            background: #87CEEB;
        }
        
        #gameCanvas {
            display: block;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, #87CEEB 50%, #2E8B57 50%);
        }
        
        #uiContainer {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }
        
        #scoreDisplay {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 24px;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
        }
        
        #messageDisplay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: yellow;
            font-size: 32px;
            font-weight: bold;
            text-align: center;
            text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.8);
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        #powerBar {
            position: absolute;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            width: 80%;
            height: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 10px;
            overflow: hidden;
            display: none;
        }
        
        #powerFill {
            height: 100%;
            width: 0%;
            background: linear-gradient(to right, #00ff00, #ffff00, #ff0000);
            transition: width 0.1s;
        }
        
        #powerText {
            position: absolute;
            top: -25px;
            width: 100%;
            text-align: center;
            color: white;
            font-size: 16px;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
        }
        
        #menu {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }
        
        #menu h1 {
            color: yellow;
            font-size: 36px;
            margin-bottom: 30px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
        }
        
        .menu-btn {
            width: 80%;
            max-width: 300px;
            padding: 15px;
            margin: 10px;
            font-size: 20px;
            font-weight: bold;
            color: white;
            background-color: #1a6bff;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            pointer-events: auto;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        .menu-btn:active {
            transform: scale(0.95);
        }
        
        .difficulty-btn {
            background-color: #333;
        }
        
        #startBtn {
            background-color: #28a745;
        }
        
        #resultScreen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }
        
        #resultTitle {
            color: yellow;
            font-size: 36px;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
        }
        
        #resultScore {
            color: white;
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        #resultRating {
            color: #ffcc00;
            font-size: 24px;
            margin-bottom: 30px;
            text-align: center;
        }
        
        #restartBtn, #menuBtn {
            width: 80%;
            max-width: 300px;
            padding: 15px;
            margin: 10px;
            font-size: 20px;
            font-weight: bold;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
        }
        
        #restartBtn {
            background-color: #1a6bff;
        }
        
        #menuBtn {
            background-color: #6c757d;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    
    <div id="uiContainer">
        <div id="scoreDisplay">Голы: 0/0</div>
        <div id="messageDisplay"></div>
        <div id="powerBar">
            <div id="powerText">Сила удара: 0%</div>
            <div id="powerFill"></div>
        </div>
    </div>
    
    <div id="menu">
        <h1>ПЕНАЛЬТИ МАСТЕР</h1>
        <button class="menu-btn difficulty-btn" data-difficulty="easy">Легкий</button>
        <button class="menu-btn difficulty-btn" data-difficulty="medium">Средний</button>
        <button class="menu-btn difficulty-btn" data-difficulty="hard">Сложный</button>
        <button class="menu-btn" id="startBtn">НАЧАТЬ ИГРУ</button>
    </div>
    
    <div id="resultScreen">
        <h2 id="resultTitle">РЕЗУЛЬТАТ</h2>
        <div id="resultScore">Ваш счет: 0 из 5</div>
        <div id="resultRating"></div>
        <button id="restartBtn">ИГРАТЬ СНОВА</button>
        <button id="menuBtn">ГЛАВНОЕ МЕНЮ</button>
    </div>

    <script>
        // Константы
        const GOAL_BLUE = '#1976D2';
        
        // Инициализация элементов
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('scoreDisplay');
        const messageDisplay = document.getElementById('messageDisplay');
        const powerBar = document.getElementById('powerBar');
        const powerFill = document.getElementById('powerFill');
        const powerText = document.getElementById('powerText');
        const menu = document.getElementById('menu');
        const difficultyBtns = document.querySelectorAll('.difficulty-btn');
        const startBtn = document.getElementById('startBtn');
        const resultScreen = document.getElementById('resultScreen');
        const resultScore = document.getElementById('resultScore');
        const resultRating = document.getElementById('resultRating');
        const restartBtn = document.getElementById('restartBtn');
        const menuBtn = document.getElementById('menuBtn');

        // Размеры canvas
        let canvasWidth, canvasHeight;
        
        // Игровые переменные
        let gameState = 'menu';
        let difficulty = 'medium';
        let score = 0;
        let attempts = 0;
        let power = 0;
        let isSwiping = false;
        let swipeStart = null;
        
        // Игровые объекты
        const ball = {
            x: 0, y: 0, radius: 15,
            speedX: 0, speedY: 0,
            moving: false, scored: false, saved: false
        };
        
        const goalkeeper = {
            x: 0, y: 100, width: 80, height: 120,
            speed: 3, direction: 1, moving: true
        };
        
        const goal = {
            x: 0, y: 150, width: 300, height: 200
        };
        
        // Частицы
        let particles = [];
        
        // AudioContext
        let audioContext;
        try {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
        } catch (e) {
            console.log('Web Audio API не поддерживается');
        }

        // Основные функции
        function resizeCanvas() {
            canvasWidth = window.innerWidth;
            canvasHeight = window.innerHeight;
            canvas.width = canvasWidth;
            canvas.height = canvasHeight;
            
            ball.x = canvasWidth / 2;
            ball.y = canvasHeight - 150;
            goal.x = canvasWidth / 2 - goal.width / 2;
            goalkeeper.x = canvasWidth / 2 - goalkeeper.width / 2;
            
            if (gameState === 'playing') draw();
        }
        
        function initGame() {
            score = 0;
            attempts = 0;
            updateScoreDisplay();
            startAttempt();
        }
        
        function startAttempt() {
            ball.x = canvasWidth / 2;
            ball.y = canvasHeight - 150;
            ball.speedX = 0;
            ball.speedY = 0;
            ball.moving = false;
            ball.scored = false;
            ball.saved = false;
            
            goalkeeper.x = canvasWidth / 2 - goalkeeper.width / 2;
            goalkeeper.y = 100;
            goalkeeper.moving = true;
            goalkeeper.direction = Math.random() > 0.5 ? 1 : -1;
            
            // Настройка сложности
            goalkeeper.speed = difficulty === 'easy' ? 2 : 
                             difficulty === 'medium' ? 3 : 4;
            
            powerBar.style.display = 'none';
        }
        
        function updateScoreDisplay() {
            scoreDisplay.textContent = `Голы: ${score}/${attempts}`;
        }
        
        function showMessage(text, duration = 120) {
            messageDisplay.textContent = text;
            messageDisplay.style.opacity = '1';
            setTimeout(() => {
                messageDisplay.style.opacity = '0';
            }, duration * 16);
        }
        
        function draw() {
            // Очистка
            ctx.clearRect(0, 0, canvasWidth, canvasHeight);
            
            // Фон
            ctx.fillStyle = '#87CEEB';
            ctx.fillRect(0, 0, canvasWidth, canvasHeight / 2);
            ctx.fillStyle = '#2E8B57';
            ctx.fillRect(0, canvasHeight / 2, canvasWidth, canvasHeight / 2);
            
            // Ворота
            ctx.fillStyle = GOAL_BLUE;
            ctx.fillRect(goal.x - 10, goal.y, goal.width + 20, 10);
            ctx.fillRect(goal.x - 10, goal.y, 10, goal.height);
            ctx.fillRect(goal.x + goal.width, goal.y, 10, goal.height);
            
            // Вратарь
            ctx.fillStyle = '#1E88E5';
            ctx.fillRect(goalkeeper.x, goalkeeper.y, goalkeeper.width, goalkeeper.height);
            
            // Мяч
            ctx.fillStyle = 'white';
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fill();
        }
        
        function gameLoop() {
            if (gameState === 'playing') {
                update();
                draw();
            }
            requestAnimationFrame(gameLoop);
        }
        
        // Обработчики событий
        window.addEventListener('resize', resizeCanvas);
        canvas.addEventListener('touchstart', handleTouchStart);
        canvas.addEventListener('touchmove', handleTouchMove);
        canvas.addEventListener('touchend', handleTouchEnd);
        
        difficultyBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                difficultyBtns.forEach(b => b.style.backgroundColor = '#333');
                btn.style.backgroundColor = '#1E88E5';
                difficulty = btn.dataset.difficulty;
            });
        });
        
        startBtn.addEventListener('click', () => {
            gameState = 'playing';
            menu.style.display = 'none';
            initGame();
        });
        
        restartBtn.addEventListener('click', () => {
            gameState = 'playing';
            resultScreen.style.display = 'none';
            initGame();
        });
        
        menuBtn.addEventListener('click', () => {
            gameState = 'menu';
            resultScreen.style.display = 'none';
            menu.style.display = 'flex';
        });
        
        // Инициализация
        resizeCanvas();
        gameLoop();
        
        // PWA: Service Worker
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js');
            });
        }
    </script>
</body>
</html>
